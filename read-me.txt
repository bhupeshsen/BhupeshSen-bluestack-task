hello thanks for giving me this opportunity
as you assigned this assignment I have tried my best

I have work on MVC pattern and also use get for state management
I have created folders such name as
F.1 controller
I have created this  for storing all my controller files
for writing all my business logic


F.2 helper
I have created this  for storing all helpers files
some file name as a constant for all my API URLs

F.3 langs
I have created this  for storing all files related to language key 
 
F.4 models
I have created this  for storing all models files

F.5 service
The service folder is used for storing api related files


F.6 View
This folder is used for storing all my view files


F.7 Widget
This folder is used for storing some custom widget


F.8 Theme
This folder is used for storing files related to colors and style





I have also attached API folder 
I have written some API in PHP mysql 
such name as 
login
user-register
get-user-data


I have tried to cover all this points
1 Done
i. An image of game.tv logo
ii. Username text field: It should have validation of min 3 characters and max 10 with proper error message if the validation fails.
iii. Password field: It should have validation of min 3 characters and max 10 with proper error message if the validation fails.
iv. Submit button: It should be disabled if either validation fails.


2 Done
i. If a user has already logged in, they should be automatically logged in and sent to the home screen directly next time they open the app.
ii. You don't need to hit an api to login. Just hardcode a couple of valid username/password pairs and show an error message if the user enters invalid pair.
  User 1: 9898989898 / password123
  User 2: 9876543210 / password123
iii. Some UI points:
  1. Put colors everywhere yourself. Try to make it look good.
  2. All 4 items should be horizontally and vertically centered both, one below the other

3 Done
 Home screen: This will hold some information related to the logged in user, along with a few tournament cards. Please follow the design as closely as possible:



4 Done
i. Hit an API to fetch the data for the User Details section i.e. the UI elements above “Recommended for you” section. You can use any mocking server of your choice to create the API yourself.
ii. For the “Recommended for you” section, hit the following api:
  http://tournaments-dot-game-tv-prod.uc.r.appspot.com/tournament/api/tournaments_list_v2?limit=10&status=all
  This api supports pagination, where you specify how many results you wish to receive using the limit parameter (say 10), then fetch the subsequent 10 items by specifying a cursor param in the subsequent api hit. This cursor param is to be picked from the response of preceding api hit. For example:
  http://tournaments-dot-game-tv-prod.uc.r.appspot.com/tournament/api/tournaments_list_v2?limit=10&status=all&cursor=CmMKGQoMcmVnX2VuZF9kYXRlEgkIgLTH_rqS7AISQmoOc35nYW1lLXR2LXByb2RyMAsSClRvdXJuYW1lbnQiIDIxMDQ5NzU3N2UwOTRmMTU4MWExMDUzODEwMDE3NWYyDBgAIAE=
  The relevant data points from the above are: name, cover_url, game_name. Please implement infinite scroll for the above api
iii. Add loading spinners/error states as necessary.
iv. Please use a state management library of your choice.




5 Done
Bonus Points:
Add support for localization in the app for English and Japanese.
Build an API for the User Details section instead of mocking it.